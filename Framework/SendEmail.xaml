<Activity mc:Ignorable="sap sap2010" x:Class="SendEmail" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:umam="clr-namespace:UiPath.MicrosoftOffice365.Activities.Mail;assembly=UiPath.MicrosoftOffice365.Activities" xmlns:umame="clr-namespace:UiPath.MicrosoftOffice365.Activities.Mail.Enums;assembly=UiPath.MicrosoftOffice365.Activities" xmlns:umamm="clr-namespace:UiPath.MicrosoftOffice365.Activities.Mail.Models;assembly=UiPath.MicrosoftOffice365.Activities" xmlns:upr="clr-namespace:UiPath.Platform.ResourceHandling;assembly=UiPath.Platform" xmlns:usau="clr-namespace:UiPath.Shared.Activities.Utils;assembly=UiPath.MicrosoftOffice365.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ToEmail" Type="InArgument(scg:IEnumerable(x:String))" />
    <x:Property Name="in_Subject" Type="InArgument(x:String)" />
    <x:Property Name="in_dtDetailFinal" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_dtDTOEFinal" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_arr_DeptChairName" Type="InArgument(s:String[])" />
    <x:Property Name="in_EmailTemplate" Type="InArgument(x:String)" />
    <x:Property Name="in_EmailCC" Type="InArgument(scg:IEnumerable(x:String))" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1051.2,5318.4</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>SendEmail_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Mail.Models</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Mail.Enums</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Mail</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Numerics</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.MetadataLoadContext</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.CodeDom</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Forms</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap:VirtualizedContainerService.HintSize="654.4,5253.6" sap2010:WorkflowViewState.IdRef="Sequence_13">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="592,174.4" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Send UseCase1 Email Started&quot;]" />
    <Sequence sap2010:Annotation.AnnotationText="Purpose: Sends email notifications to Physicians about their pending Open Encounters.&#xA;Input: Email Template and Data Table containing Open Encounters data.&#xA;Output: Outlook email sent to the respective Physicians.&#xA;Details: Uses a structured email template.&#xA;Includes categorized Open Encounters based on the duration they have remained open.&#xA;Ensures clear communication regarding outstanding items.&#xA;Assumption: The recipient list is correctly set.&#xA;The email template is properly formatted.&#xA;Outlook is configured and accessible." DisplayName="SendEmail - UseCase1_Physician Notification" sap:VirtualizedContainerService.HintSize="592,4990.4" sap2010:WorkflowViewState.IdRef="Sequence_14">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="str_Body" />
        <Variable x:TypeArguments="x:String" Name="str_ProviderName" />
        <Variable x:TypeArguments="x:String" Name="str_DetailTable" />
        <Variable x:TypeArguments="x:String" Name="str_DTOETable" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="529.6,56.8" sap2010:WorkflowViewState.IdRef="CommentOut_1">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="540.8,260" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="478.4,171.2" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
              <ui:MultipleAssign.AssignOperations>
                <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="scg:IEnumerable(x:String)">[in_ToEmail]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="scg:IEnumerable(x:String)">[{"rpabot24@uw.edu"}]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="x:String">[in_Subject]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="x:String">test</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                </scg:List>
              </ui:MultipleAssign.AssignOperations>
            </ui:MultipleAssign>
          </Sequence>
        </ui:CommentOut.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:CommentOut>
      <Assign sap2010:Annotation.AnnotationText="Purpose: Extracts the Provider Name from the first row of in_dtDetailFinal.&#xA;Input: in_dtDetailFinal (DataTable) with a column named &quot;Provider Name&quot;.&#xA;Output: Stores the provider name as a String in str_providerName.&#xA;Assumption: The DataTable is not empty, and the column &quot;Provider Name&quot; exists." sap:VirtualizedContainerService.HintSize="529.6,205.6" sap2010:WorkflowViewState.IdRef="Assign_1">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[str_ProviderName]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[in_dtDetailFinal.Rows(0).item("Provider Name").ToString]</InArgument>
        </Assign.Value>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Assign>
      <ui:ReadTextFile File="{x:Null}" sap2010:Annotation.AnnotationText="Purpose: Reads an email template from a text file.&#xA;Input: File path of the email template (should be predefined or dynamically set).&#xA;Output: Stores the file content in on_emailtemplate (String).&#xA;Dependency: Ensure the file exists at the specified location before execution." Content="[str_Body]" DisplayName="Read Text File" FileName="[in_EmailTemplate]" sap:VirtualizedContainerService.HintSize="529.6,236.8" sap2010:WorkflowViewState.IdRef="ReadTextFile_1">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:ReadTextFile>
      <Assign sap:VirtualizedContainerService.HintSize="529.6,113.6" sap2010:WorkflowViewState.IdRef="Assign_9">
        <Assign.To>
          <OutArgument x:TypeArguments="sd:DataTable">[in_dtDetailFinal]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="sd:DataTable">[in_dtDetailFinal.AsEnumerable().OrderByDescending(Function(x) Convert.ToInt32(x("Days Open"))).CopyToDataTable()]</InArgument>
        </Assign.Value>
      </Assign>
      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Purpose: Converts the in_dtDetailFinal DataTable into a formatted string for use in notifications.&#xA;Input: in_dtDetailFinal (DataTable) containing detailed information.&#xA;Output: str_DetailTable (String) containing the formatted table representation.&#xA;Details: Iterates through the rows of in_dtDetailFinal.&#xA;Formats the data into a structured table format.&#xA;Stores the result in str_DetailTable for further use.&#xA;Assumption: in_dtDetailFinal is not empty and contains valid data.&#xA;The output format aligns with the expected structure for email or reporting." Code="Dim htmlTable As String = &quot;&lt;table border='1' style='border-collapse: collapse; width: 100%; text-align: left;'&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;tr style='background-color: #4CAF50; color: white; font-weight: bold;'&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Provider Name&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;MRN&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Service Date&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Days Open&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Epic Dept Name&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Encounter Type&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Status&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;/tr&gt;&quot;&#xA;&#xA;If YourDataTable IsNot Nothing AndAlso YourDataTable.Rows.Count &gt; 0 Then&#xA;    For Each row As DataRow In YourDataTable.Rows&#xA;        htmlTable &amp;= &quot;&lt;tr&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Provider Name&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;MRN&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Service Date&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;&#x9;&#x9;htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Days Open&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Epic Dept Name&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Encounter Type&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Status&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;&#x9;&#x9;htmlTable &amp;= &quot;&lt;/tr&gt;&quot;&#xA;    Next&#xA;Else&#xA;    htmlTable &amp;= &quot;&lt;tr&gt;&lt;td colspan='3' style='padding: 8px; text-align: center;'&gt;No Data Available&lt;/td&gt;&lt;/tr&gt;&quot;&#xA;End If&#xA;&#xA;htmlTable &amp;= &quot;&lt;/table&gt;&quot;&#xA;&#xA;' Assign the HTML table output&#xA;Out_HtmlTable = htmlTable&#xA;" DisplayName="Invoke Code - Detail Table" sap:VirtualizedContainerService.HintSize="529.6,416.8" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="YourDataTable">[in_dtDetailFinal]</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Out_HtmlTable">[str_DetailTable]</OutArgument>
        </ui:InvokeCode.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeCode>
      <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Purpose: Converts the in_dtDTOEFinal DataTable into a structured string format for use in notifications or reports.&#xA;Input: in_dtDTOEFinal (DataTable) containing DTOE details.&#xA;Output: str_DTOETable (String) with the formatted table representation.&#xA;Details: Iterates through in_dtDTOEFinal to extract relevant data.&#xA;Formats the data into a structured table format.&#xA;Stores the formatted table in str_DTOETable for further use.&#xA;Assumption: in_dtDTOEFinal is not empty and contains valid data.&#xA;The output format aligns with expected email or report structures." Code="Dim htmlTable As String = &quot;&lt;table border='1' style='border-collapse: collapse; width: 100%; text-align: left;'&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;tr style='background-color: #4CAF50; color: white; font-weight: bold;'&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Provider Name&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Epic Dept Name&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;8-14 days&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;15-21 days&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;22-30 days&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;31+ days&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;th style='padding: 8px;'&gt;Grand Total&lt;/th&gt;&quot;&#xA;htmlTable &amp;= &quot;&lt;/tr&gt;&quot;&#xA;&#xA;If YourDataTable IsNot Nothing AndAlso YourDataTable.Rows.Count &gt; 0 Then&#xA;    For Each row As DataRow In YourDataTable.Rows&#xA;        htmlTable &amp;= &quot;&lt;tr&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Provider Name&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Epic Dept Name&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;8-14 days&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;15-21 days&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;22-30 days&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;31+ days&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;td style='padding: 8px; border: 1px solid #ddd;'&gt;&quot; &amp; row(&quot;Grand Total&quot;).ToString() &amp; &quot;&lt;/td&gt;&quot;&#xA;        htmlTable &amp;= &quot;&lt;/tr&gt;&quot;&#xA;    Next&#xA;Else&#xA;    htmlTable &amp;= &quot;&lt;tr&gt;&lt;td colspan='3' style='padding: 8px; text-align: center;'&gt;No Data Available&lt;/td&gt;&lt;/tr&gt;&quot;&#xA;End If&#xA;&#xA;htmlTable &amp;= &quot;&lt;/table&gt;&quot;&#xA;&#xA;' Assign the HTML table output&#xA;Out_HtmlTable = htmlTable&#xA;" DisplayName="Invoke Code - DTOE Table" sap:VirtualizedContainerService.HintSize="529.6,464.8" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="sd:DataTable" x:Key="YourDataTable">[in_dtDTOEFinal]</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Out_HtmlTable">[str_DTOETable]</OutArgument>
        </ui:InvokeCode.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeCode>
      <Assign sap2010:Annotation.AnnotationText="Purpose: Personalizes the email body by replacing the &quot;&lt;Provider Name&gt;&quot; placeholder with the actual provider’s name.&#xA;Input: str_Body (String) – Email template containing placeholders.&#xA;str_ProviderName (String) – Actual provider name to insert.&#xA;Output: Updated str_Body with the provider’s name in place of the placeholder.&#xA;Assumption: str_Body contains the &quot;&lt;Provider Name&gt;&quot; placeholder.&#xA;str_ProviderName has a valid value before execution." sap:VirtualizedContainerService.HintSize="529.6,253.6" sap2010:WorkflowViewState.IdRef="Assign_2">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[str_Body]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[str_Body.Replace("&amp;lt;Provider Name&amp;gt;",str_ProviderName)]</InArgument>
        </Assign.Value>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Assign>
      <Assign sap2010:Annotation.AnnotationText="Purpose: Inserts the formatted detail table into the email body by replacing the &quot;&lt;TableData&gt;&quot; placeholder.&#xA;Input: str_Body (String) – Email template containing placeholders.&#xA;str_DetailTable (String) – Preformatted table data for insertion.&#xA;Output: Updated str_Body with str_DetailTable replacing the &quot;&lt;TableData&gt;&quot; placeholder.&#xA;Assumption: str_Body contains the &quot;&lt;TableData&gt;&quot; placeholder.&#xA;str_DetailTable is correctly formatted and populated before replacement." sap:VirtualizedContainerService.HintSize="529.6,253.6" sap2010:WorkflowViewState.IdRef="Assign_3">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[str_Body]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[str_Body.Replace("&amp;lt;TableData&amp;gt;",str_DetailTable)]</InArgument>
        </Assign.Value>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Assign>
      <Assign sap2010:Annotation.AnnotationText="Purpose: Inserts the formatted DTOE table into the email body by replacing the &quot;&lt;TableData2&gt;&quot; placeholder.&#xA;Input: str_Body (String) – Email template containing placeholders.&#xA;str_DTOETable (String) – Preformatted DTOE table data for insertion.&#xA;Output: Updated str_Body with str_DTOETable replacing the &quot;&lt;TableData2&gt;&quot; placeholder.&#xA;Assumption: str_Body contains the &quot;&lt;TableData2&gt;&quot; placeholder.&#xA;str_DTOETable is correctly formatted and populated before replacement." sap:VirtualizedContainerService.HintSize="529.6,253.6" sap2010:WorkflowViewState.IdRef="Assign_4">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[str_Body]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[str_Body.Replace("&amp;lt;TableData2&amp;gt;",str_DTOETable)]</InArgument>
        </Assign.Value>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Assign>
      <If Condition="[IsNothing(in_EmailCC)]" sap:VirtualizedContainerService.HintSize="529.6,468.8" sap2010:WorkflowViewState.IdRef="If_2">
        <If.Then>
          <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="496,193.6" sap2010:WorkflowViewState.IdRef="Sequence_9">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign sap:VirtualizedContainerService.HintSize="433.6,104.8" sap2010:WorkflowViewState.IdRef="Assign_10">
              <Assign.To>
                <OutArgument x:TypeArguments="scg:IEnumerable(x:String)">[in_EmailCC]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="scg:IEnumerable(x:String)">[{"NoValueFound"}]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,104.8" sap2010:WorkflowViewState.IdRef="Sequence_10">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Sequence>
        </If.Else>
      </If>
      <If sap2010:Annotation.AnnotationText="Purpose: Ensures that the primary recipient (in_ToEmail(0)) is not duplicated in the CC list (in_EmailCC(0)).&#xA;Condition: Compares the first email in To and CC lists in a case-insensitive manner.&#xA;Input: in_ToEmail(0).ToString (String) – First recipient email.&#xA;in_EmailCC(0).ToString (String) – First CC recipient email.&#xA;Output: If True → The same email exists in both lists, so duplicate handling can be applied.&#xA;If False → The emails are different, and normal email processing continues.&#xA;Assumption: Both in_ToEmail and in_EmailCC contain at least one email.&#xA;Email addresses are stored in a consistent format (e.g., trimmed, without extra spaces)." Condition="[in_ToEmail(0).tostring .ToLower.Equals(in_EmailCC(0).ToString.ToLower)]" sap:VirtualizedContainerService.HintSize="529.6,1236.8" sap2010:WorkflowViewState.IdRef="If_1">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <Sequence sap2010:Annotation.AnnotationText="Purpose: Updates the email body by replacing Dept Chief Name placeholders with &quot;UWP Administration&quot; when the primary and CC emails are the same.&#xA;Input: str_Body (String) – Email template containing placeholders.&#xA;Output: Updated str_Body with &quot;&lt;DeptChiefName&gt;&quot; and &quot;&lt;DeptChiefNameOT&gt;&quot; replaced by &quot;UWP Administration&quot;.&#xA;Assumption: The If condition confirmed that the To Email and CC Email are identical.&#xA;str_Body contains the placeholders before execution." DisplayName="Then" sap:VirtualizedContainerService.HintSize="496,431.2" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign sap:VirtualizedContainerService.HintSize="433.6,113.6" sap2010:WorkflowViewState.IdRef="Assign_6">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[str_Body]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[str_Body.Replace("&amp;lt;DeptChiefName&amp;gt;","UWP Administration")]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign sap:VirtualizedContainerService.HintSize="433.6,104.8" sap2010:WorkflowViewState.IdRef="Assign_7">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[str_Body]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[str_Body.Replace("&amp;lt;DeptChiefNameOT&amp;gt;","UWP Administration")]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
        <If.Else>
          <Sequence sap2010:Annotation.AnnotationText="Purpose: Dynamically updates the email body with the list of Department Chair names when the primary and CC emails are different.&#xA;Input: str_Body (String) – Email template containing placeholders.&#xA;in_arr_DeptChairName (Array of Strings) – List of Department Chair names.&#xA;Output: Updated str_Body with &quot;&lt;DeptChiefName&gt;&quot; and &quot;&lt;DeptChiefNameOT&gt;&quot; replaced by a comma-separated list of Department Chair names.&#xA;Assumption: The If condition determined that the To Email and CC Email are different.&#xA;in_arr_DeptChairName contains valid names before execution.&#xA;str_Body includes the &quot;&lt;DeptChiefName&gt;&quot; and &quot;&lt;DeptChiefNameOT&gt;&quot; placeholders before replacement." DisplayName="Else" sap:VirtualizedContainerService.HintSize="496,479.2" sap2010:WorkflowViewState.IdRef="Sequence_4">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign sap:VirtualizedContainerService.HintSize="433.6,113.6" sap2010:WorkflowViewState.IdRef="Assign_5">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[str_Body]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[str_Body.Replace("&amp;lt;DeptChiefName&amp;gt;",string.Join(",",in_arr_DeptChairName))]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign sap:VirtualizedContainerService.HintSize="433.6,104.8" sap2010:WorkflowViewState.IdRef="Assign_8">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[str_Body]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[str_Body.Replace("&amp;lt;DeptChiefNameOT&amp;gt;",string.Join(",",in_arr_DeptChairName))]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Else>
      </If>
      <umam:SendMailConnections ArgumentAttachmentPaths="{x:Null}" AttachmentPaths="{x:Null}" Attachments="{x:Null}" Bcc="{x:Null}" Cc="{x:Null}" ConnectionAccountName="{x:Null}" ContinueOnError="{x:Null}" Mailbox="{x:Null}" MailboxBackup="{x:Reference __ReferenceID0}" ReplyTo="{x:Null}" TextBody="{x:Null}" AttachmentInputMode="Builder" AuthScopesInvalid="False" Body="[str_Body]" ConnectionId="b35be178-4fbf-4027-9f5a-7e47c70a8833" DisplayName="Send Email" sap:VirtualizedContainerService.HintSize="529.6,539.2" sap2010:WorkflowViewState.IdRef="SendMailConnections_8" Importance="Normal" InputType="HTML" SaveAsDraft="False" Subject="[in_Subject]" To="[{&quot;rpabot24@uw.edu&quot;}]" UseConnectionService="True" UseSharedMailbox="False">
        <umam:SendMailConnections.AttachmentList>
          <scg:List x:TypeArguments="InArgument(upr:IResource)" Capacity="0" />
        </umam:SendMailConnections.AttachmentList>
        <umam:SendMailConnections.AttachmentsBackup>
          <usau:BackupSlot x:TypeArguments="umame:AttachmentInputMode" StoredValue="Builder">
            <usau:BackupSlot.BackupValues>
              <scg:List x:TypeArguments="x:Object" x:Key="Existing" Capacity="1">
                <x:Null />
              </scg:List>
            </usau:BackupSlot.BackupValues>
          </usau:BackupSlot>
        </umam:SendMailConnections.AttachmentsBackup>
        <umam:SendMailConnections.InputTypeBackup>
          <usau:BackupSlot x:TypeArguments="umame:BodyInputType" StoredValue="HTML">
            <usau:BackupSlot.BackupValues>
              <scg:Dictionary x:TypeArguments="umame:BodyInputType, scg:List(x:Object)" />
            </usau:BackupSlot.BackupValues>
          </usau:BackupSlot>
        </umam:SendMailConnections.InputTypeBackup>
        <umam:SendMailConnections.MailboxArg>
          <umamm:MailboxArgument SharedMailbox="{x:Null}" UseSharedMailbox="False">
            <umamm:MailboxArgument.Backup>
              <usau:BackupSlot x:TypeArguments="umame:MailboxSelectionMode" x:Name="__ReferenceID0" StoredValue="NoMailbox">
                <usau:BackupSlot.BackupValues>
                  <scg:Dictionary x:TypeArguments="umame:MailboxSelectionMode, scg:List(x:Object)" />
                </usau:BackupSlot.BackupValues>
              </usau:BackupSlot>
            </umamm:MailboxArgument.Backup>
          </umamm:MailboxArgument>
        </umam:SendMailConnections.MailboxArg>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </umam:SendMailConnections>
      <ui:CommentOut DisplayName="Comment Out - ENABLE FOR MAY GOLIVE" sap:VirtualizedContainerService.HintSize="529.6,56.8" sap2010:WorkflowViewState.IdRef="CommentOut_6">
        <ui:CommentOut.Body>
          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,613.6" sap2010:WorkflowViewState.IdRef="Sequence_11">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <umam:SendMailConnections ArgumentAttachmentPaths="{x:Null}" AttachmentPaths="{x:Null}" Attachments="{x:Null}" Bcc="{x:Null}" Cc="{x:Null}" ConnectionAccountName="{x:Null}" ContinueOnError="{x:Null}" Mailbox="{x:Null}" MailboxBackup="{x:Reference __ReferenceID1}" ReplyTo="{x:Null}" TextBody="{x:Null}" AttachmentInputMode="Builder" AuthScopesInvalid="False" Body="[str_Body]" ConnectionId="b35be178-4fbf-4027-9f5a-7e47c70a8833" DisplayName="Send Email" sap:VirtualizedContainerService.HintSize="354,525" sap2010:WorkflowViewState.IdRef="SendMailConnections_9" Importance="Normal" InputType="HTML" SaveAsDraft="False" Subject="[in_Subject]" To="[in_ToEmail]" UseConnectionService="True" UseSharedMailbox="False">
              <umam:SendMailConnections.AttachmentList>
                <scg:List x:TypeArguments="InArgument(upr:IResource)" Capacity="0" />
              </umam:SendMailConnections.AttachmentList>
              <umam:SendMailConnections.AttachmentsBackup>
                <usau:BackupSlot x:TypeArguments="umame:AttachmentInputMode" StoredValue="Builder">
                  <usau:BackupSlot.BackupValues>
                    <scg:List x:TypeArguments="x:Object" x:Key="Existing" Capacity="1">
                      <x:Null />
                    </scg:List>
                  </usau:BackupSlot.BackupValues>
                </usau:BackupSlot>
              </umam:SendMailConnections.AttachmentsBackup>
              <umam:SendMailConnections.InputTypeBackup>
                <usau:BackupSlot x:TypeArguments="umame:BodyInputType" StoredValue="HTML">
                  <usau:BackupSlot.BackupValues>
                    <scg:Dictionary x:TypeArguments="umame:BodyInputType, scg:List(x:Object)" />
                  </usau:BackupSlot.BackupValues>
                </usau:BackupSlot>
              </umam:SendMailConnections.InputTypeBackup>
              <umam:SendMailConnections.MailboxArg>
                <umamm:MailboxArgument SharedMailbox="{x:Null}" UseSharedMailbox="False">
                  <umamm:MailboxArgument.Backup>
                    <usau:BackupSlot x:TypeArguments="umame:MailboxSelectionMode" x:Name="__ReferenceID1" StoredValue="NoMailbox">
                      <usau:BackupSlot.BackupValues>
                        <scg:Dictionary x:TypeArguments="umame:MailboxSelectionMode, scg:List(x:Object)" />
                      </usau:BackupSlot.BackupValues>
                    </usau:BackupSlot>
                  </umamm:MailboxArgument.Backup>
                </umamm:MailboxArgument>
              </umam:SendMailConnections.MailboxArg>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </umam:SendMailConnections>
          </Sequence>
        </ui:CommentOut.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:CommentOut>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="529.6,165.6" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;UseCase1 Email Successfully Sent&quot;]" />
    </Sequence>
  </Sequence>
</Activity>